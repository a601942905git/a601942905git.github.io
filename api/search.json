[{"id":"a74d032dc9bf8ca9d012adc342b4fd84","title":"动态伸缩你的服务","content":"1.前言如你所知，服务的常规部署方式如下：\n\n对外暴露的服务都会在前面部署nginx用于提供反向代理和负载均衡能力\n下面会快速部署一套类似的服务，分析其存在的问题并给出相应解决方案\n2.应用相关2.1 启动服务使用boot-cloud-openfeign-provider启动3个服务实例，端口分别为8081、8082、8083\n2.2 服务验证在浏览器中分别输入：http://localhost:8081/index/nginx、http://localhost:8082/index/nginx、http://localhost:8083/index/nginx，保证3个服务实例均可被访问\n\n\n\n\n\n\n\n\n\n服务运行依赖5.1和5.2中的consul\n3.nginx相关3.1 安装3.1.1 搜索镜像docker search nginx\n\n3.1.2 拉取镜像docker pull nginx\n\n3.1.3 运行镜像docker run --name nginx -p 80:80 -d nginx\n\n3.1.4 拷贝镜像配置文件docker cp nginx:/etc/nginx/nginx.conf path/nginx[宿主机放配置文件路径]\n\n3.1.5 删除容器docker rm -f nginx\n\n3.1.6 指定配置文件运行镜像docker run --name nginx -p 80:80 -v [宿主机路径]/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v [宿主机路径]/nginx/conf.d:/etc/nginx/conf.d -d nginx\n\n3.2 配置3.2.1 配置负载均衡在[宿主机路径]/nginx/conf.d目录下创建load-balancer.conf文件，内容如下：\nupstream backend &#123;\n    server 10.100.40.243:8081;\n    server 10.100.40.243:8082;\n    server 10.100.40.243:8083;\n&#125;\n\nserver&#123;\n    listen 80;\n\n    location / &#123;\n        proxy_pass http://backend;\n    &#125;\n&#125;\n\n3.3 验证3.3.1 重启nginx服务docker exec -it nginx nginx -s reload\n\n3.3.2 访问nginx服务在浏览器中输入：http://localhost/index/nginx，多次请求依次可以看到`openfeign service：hello nginx from 8081、openfeign service：hello nginx from 8082、openfeign service：hello nginx from 8083&#96;结果，则说明nginx负载均衡配置正常。\n4.问题如你所见，服务的负载均衡能力是通过在load-balancer.conf配置文件中写死服务列表来实现的，同时也意味着，只要后端服务列表发生变化，就需要修改配置并通过nginx -s reload命令来重新加载。\n5.方案有了问题，既然会有对应的解决方案，本文要介绍的解决方案就是consul和consul template\n5.1 安装consul根据Install Consul官网教程安装consul\n5.2 运行consulconsul agent -dev\n\n5.3 安装consul template5.3.1 下载压缩包wget https://releases.hashicorp.com/consul-template/0.20.0/consul-template_0.20.0_linux_amd64.zip\n\n5.3.2 解压unzip consul-template_0.20.0_linux_amd64.zip\n\n\n\n\n\n\n\n\n\n\nMac os可以通过brew install consul-template进行安装，简单、方便\n5.4 创建负载均衡配置文件模板创建load-balancer.ctmpl文件，编辑如下内容：\nupstream backend &#123;\n    &#123;&#123;- range service \"openfeign-provider-service\" &#125;&#125;\n        server &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125;;\n    &#123;&#123;- end &#125;&#125;\n&#125;\n\nserver &#123;\n   listen 80;\n\n   location / &#123;\n      proxy_pass http://backend;\n   &#125;\n&#125;\n\n5.5 清空配置文件清空3.2.1章节load-balancer.conf文件内容\n5.6 创建consul template配置创建consul-template-config.hcl文件，编辑如下内容：\nconsul &#123;\n  address = \"localhost:8500\"\n\n  retry &#123;\n    enabled  = true\n    attempts = 12\n    backoff  = \"250ms\"\n  &#125;\n&#125;\ntemplate &#123;\n  source      = \"[5.4章节指定的路径]/load-balancer.conf.ctmpl\"\n  destination = \"[5.5章节指定的路径]/load-balancer.conf\"\n  perms       = 0600\n  command     = \"sh -c docker exec -it nginx nginx -s reload\"\n&#125;\n\n\n\n\n\n\n\n\n\n\n\naddress：指定consul地址；source：用于指定负载均衡配置模板文件路径；destination：负载均衡配置生成文件路径；command：用于指定要执行的命令。整体流程：consul template从address地址拉取服务地址列表，根据source模板文件生成负载均衡配置到destination文件中，执行command重新加载nginx\n5.7 运行consul templateconsul-template -config=consul-template-config.hcl\n\n\n\n\n\n\n\n\n\n\n运行consul template之后，会发现load-balancer.conf文件中有了负载均衡配置\n5.8 服务关闭、启动到这里，你会发现伴随着服务关闭、服务启动，load-balancer.conf配置文件中的内容也在一直跟着改变，从而实现服务动态伸缩。\n","slug":"动态伸缩你的服务","date":"2022-12-10T12:19:12.109Z","categories_index":"","tags_index":"","author_index":"黑白搬砖工"}]