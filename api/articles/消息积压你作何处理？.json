{"title":"消息积压你作何处理？","uid":"f8c1d4f8bf32cb91acc7b2a551ae4194","slug":"消息积压你作何处理？","date":"2022-12-11T05:48:32.000Z","updated":"2022-12-11T05:48:29.440Z","comments":true,"path":"api/articles/消息积压你作何处理？.json","keywords":null,"cover":null,"content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>当被通知消费的队列存在消息积压并呈一个持续上升趋势，需要紧急处理一下，你会怎么办？能怎么办呢？先内心慌张一会，战斗一番，然后打开著名的搜索引擎进行搜索，在搜索结果中寻找答案。本文也即将成为你搜索引擎中出现的一个搜索结果，为你提供解决方案。</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h2><p>以下解决方案都是针对<code>rabbitmq</code></p>\n<h3 id=\"2-1-加机器\"><a href=\"#2-1-加机器\" class=\"headerlink\" title=\"2.1 加机器\"></a>2.1 加机器</h3><p>最简单最方便的处理方案就是让运维加机器，这样消息队列中的消息可以通过负载的方式将消息均摊到更多的机器上，消费者多了，会慢慢处理掉队列中积压的消息。</p>\n<h3 id=\"2-2-加消费者\"><a href=\"#2-2-加消费者\" class=\"headerlink\" title=\"2.2 加消费者\"></a>2.2 加消费者</h3><p>当然加机器方案并不是万能的，如果你的系统不够格，是加不了加机器(成本过高)，那么就得另辟蹊径了，增加并发消费线程数。</p>\n<h4 id=\"2-2-1-固定并发数\"><a href=\"#2-2-1-固定并发数\" class=\"headerlink\" title=\"2.2.1 固定并发数\"></a>2.2.1 固定并发数</h4><pre class=\"line-numbers language-@RabbitListener```注解中有这么一个属性```concurrency```，注释如下：\" data-language=\"@RabbitListener```注解中有这么一个属性```concurrency```，注释如下：\"><code class=\"language-@RabbitListener```注解中有这么一个属性```concurrency```，注释如下：\">\n&#96;&#96;&#96;java\n&#x2F;**\n\t * Set the concurrency of the listener container for this listener. Overrides the\n\t * default set by the listener container factory. Maps to the concurrency setting of\n\t * the container type.\n\t * &lt;p&gt;For a\n\t * &#123;@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer\n\t * SimpleMessageListenerContainer&#125; if this value is a simple integer, it sets a fixed\n\t * number of consumers in the &#123;@code concurrentConsumers&#125; property. If it is a string\n\t * with the form &#123;@code &quot;m-n&quot;&#125;, the &#123;@code concurrentConsumers&#125; is set to &#123;@code m&#125;\n\t * and the &#123;@code maxConcurrentConsumers&#125; is set to &#123;@code n&#125;.\n\t * &lt;p&gt;For a\n\t * &#123;@link org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer\n\t * DirectMessageListenerContainer&#125; it sets the &#123;@code consumersPerQueue&#125; property.\n\t * @return the concurrency.\n\t * @since 2.0\n\t *&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>翻译过来就是为监听器设置并发数，如果属性值是一个int类型，那么设置的就是固定并发数；如果属性值是一个string类型(m-n)，那么设置的就是动态并发数，最小并发数为m，最大并发数为n</p></blockquote>\n<p>基于文档注释，可以得出一个结论，那就是如果想要设置并发，那么只需要在<code>@RabbitListener</code>注解中添加<code>concurrency</code>属性并指定一个数值即可</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"test3\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"rabbitListenerContainerFactory\"</span><span class=\"token punctuation\">,</span> concurrency <span class=\"token operator\">=</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-动态并发数\"><a href=\"#2-2-2-动态并发数\" class=\"headerlink\" title=\"2.2.2 动态并发数\"></a>2.2.2 动态并发数</h4><p>设置消费者并发数后消息消费快了，也不积压了，问题被完美解决。由于存在<code>动态并发数</code>这一章节，说明事情并没有这么简单。设置消费者并发数的初衷是想解决消息积压问题，但是消息并非时时刻刻都会积压，大部分情况下队列中可能都不存在可以消费的消息，此时消费者并发数的设置无疑会给系统带来一定的资源消耗。好在<code>spring</code>框架相关大佬已经给出了解决方案:<code>动态并发数</code></p>\n<p>动态并发数设置形式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"test3\"</span><span class=\"token punctuation\">,</span> containerFactory <span class=\"token operator\">=</span> <span class=\"token string\">\"rabbitListenerContainerFactory\"</span><span class=\"token punctuation\">,</span> concurrency <span class=\"token operator\">=</span> <span class=\"token string\">\"1-10\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>concurrency</code>设置为<code>1-10</code>则表示消费者并发数最小为<code>1</code>个，当有更多消息需要处理时，会逐渐增大消费者并发数，最大值为<code>10</code>，当没有消息需要处理是，会逐渐减少消费者并发数，减到<code>1</code>为止</p></blockquote>\n<p>看完上面的描述，你可能认为我是在胡扯，且等看看如下代码实现再下结论</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkAdjust</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> receivedOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>receivedOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1.当前消费者处于激活状态</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveIdles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 1.1 如果连续消息数超过默认值10，则考虑新增一个消费者</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveMessages<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token class-name\">SimpleMessageListenerContainer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveActiveTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">considerAddingAConsumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveMessages <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveMessages <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2.如果连续超过10次都没有消费到消息，则考虑终止当前消费者</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveIdles<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token class-name\">SimpleMessageListenerContainer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveIdleTrigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">considerStoppingAConsumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>consecutiveIdles <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h2><p>消息队列中出现消息积压，首先<code>不要慌</code>，其实是能加机器就加机器，不能加机器，说明你的系统不太重要，就得老老实实增加消费者并发数，增加消费者并发数基于上述认知，你应该设置<code>动态并发数</code></p>\n","text":"1.前言当被通知消费的队列存在消息积压并呈一个持续上升趋势，需要紧急处理一下，你会怎么办？能怎么办呢？先内心慌张一会，战斗一番，然后打开著名的搜索引擎进行搜索，在搜索结果中寻找答案。本文也即将成为你搜索引擎中出现的一个搜索结果，为你提供解决方案。 2.解决方案以下解决方案都是针对...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"消息积压","slug":"消息积压","count":1,"path":"api/tags/消息积压.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">1.前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">2.解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%8A%A0%E6%9C%BA%E5%99%A8\"><span class=\"toc-text\">2.1 加机器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%8A%A0%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">2.2 加消费者</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-%E5%9B%BA%E5%AE%9A%E5%B9%B6%E5%8F%91%E6%95%B0\"><span class=\"toc-text\">2.2.1 固定并发数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E5%8A%A8%E6%80%81%E5%B9%B6%E5%8F%91%E6%95%B0\"><span class=\"toc-text\">2.2.2 动态并发数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 总结</span></a></li></ol>","author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}},"mapped":true,"prev_post":{"title":"消息积压你作何处理？","uid":"f8c1d4f8bf32cb91acc7b2a551ae4194","slug":"kafka消费异常会如何处理？","date":"2022-12-11T05:48:32.000Z","updated":"2022-12-11T05:51:46.951Z","comments":true,"path":"api/articles/kafka消费异常会如何处理？.json","keywords":null,"cover":null,"text":"1.前言当我们使用@KafkaListener注解声明一个消费者时，该消费者就会轮询去拉取对应分区消息记录，消费消息记录，正如你所知道的那样，正常场景下会执行ack操作，提交offset到kafka服务器。但是异常场景下会如何执行，不知你是否也了解？在了解之前，先一起来看下异常处...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},"next_post":{"title":"探秘kafka消费者流程","uid":"9553bf6744373965b077add4719345f2","slug":"探秘kafka消费者流程","date":"2022-12-11T05:47:00.000Z","updated":"2022-12-11T05:47:25.192Z","comments":true,"path":"api/articles/探秘kafka消费者流程.json","keywords":null,"cover":[],"text":"1.前言为什么会想着去探秘kafka消费者流程呢？在回答这个问题之前，先带你看两个示例，看过之后想必你也就知道其中的原因了 2.示例2.1 示例一@KafkaListener(topics = \"product\", groupId = \"product1\") public voi...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}}}