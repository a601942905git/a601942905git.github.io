{"total":14,"pageSize":12,"pageCount":2,"data":[{"title":"教你使用k8s来部署springboot服务","uid":"49acd5a35f32f11bb2cfd91bb3c1f221","slug":"教你使用k8s来部署springboot服务","date":"2023-03-17T14:03:00.000Z","updated":"2023-03-17T14:04:16.276Z","comments":true,"path":"api/articles/教你使用k8s来部署springboot服务.json","cover":[],"text":"1.前言在看到此文章之前，想必你已经知道如何启动一个spring boot应用，知道如何通过docker运行你的spring boot服务。 你可能会有这样得疑问，已经了解如上部署方式，是否还有必须去了解如何通过k8s部署spring boot应用？ 如果你有这样的疑问，那么请继...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"云原生","slug":"云原生","count":1,"path":"api/categories/云原生.json"}],"tags":[{"name":"k8s","slug":"k8s","count":1,"path":"api/tags/k8s.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}},"feature":true},{"title":"docker入门笔记","uid":"ef54352044e70ece8fc193948e3b79c1","slug":"docker入门笔记","date":"2023-03-05T12:35:00.000Z","updated":"2023-03-05T12:35:45.586Z","comments":true,"path":"api/articles/docker入门笔记.json","cover":[],"text":"1.docker概述Docker是一个开源的容器化平台，它可以将应用程序及其所有依赖项打包成一个独立的可移植的容器。Docker容器提供了一个隔离的环境，使得应用程序可以在不同的操作系统和平台上运行，同时保证了应用程序的一致性和可移植性。 1.1 容器与虚拟机的区别1.1.1 容...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"容器","slug":"容器","count":1,"path":"api/categories/容器.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}},"feature":true},{"title":"动态伸缩你的服务","uid":"a74d032dc9bf8ca9d012adc342b4fd84","slug":"动态伸缩你的服务","date":"2022-12-10T13:57:00.000Z","updated":"2022-12-10T14:01:06.650Z","comments":true,"path":"api/articles/动态伸缩你的服务.json","cover":[],"text":"1.前言如你所知，服务的常规部署方式如下： 对外暴露的服务都会在前面部署nginx用于提供反向代理和负载均衡能力 下面会快速部署一套类似的服务，分析其存在的问题并给出相应解决方案 2.应用相关2.1 启动服务使用boot-cloud-openfeign-provider启动3个服...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"微服务","slug":"微服务","count":3,"path":"api/categories/微服务.json"}],"tags":[{"name":"consul","slug":"consul","count":1,"path":"api/tags/consul.json"},{"name":"nginx","slug":"nginx","count":1,"path":"api/tags/nginx.json"},{"name":"consul-template","slug":"consul-template","count":1,"path":"api/tags/consul-template.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}},"feature":true},{"title":"Redis单机、主从、哨兵、集群演进之路","uid":"c301ef2215df3326fec1a274349ffccd","slug":"Redis单机、主从、哨兵、集群演进之路","date":"2023-01-04T01:49:00.000Z","updated":"2023-03-05T12:42:10.609Z","comments":true,"path":"api/articles/Redis单机、主从、哨兵、集群演进之路.json","cover":[],"text":"1.前言1.1 单机时代刚接触redis的时候，为了能快速学习和了解这门技术，我们通常会在自己的电脑上部署一个redis服务，以此来开启redis学习之路 1.2 主从时代随着对redis的进一步深入，很快就会发现这门技术在很多场景下都能得到应用，比如：并发场景下对共享资源的控制...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"redis","slug":"redis","count":3,"path":"api/categories/redis.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"一文读懂Redis持久化机制","uid":"077c9e1306e9e7f4038efb1171146e9a","slug":"一文读懂Redis持久化机制","date":"2022-12-18T07:32:00.000Z","updated":"2023-03-05T12:46:25.578Z","comments":true,"path":"api/articles/一文读懂Redis持久化机制.json","cover":[],"text":"1.前言redis作为内存数据库，最常见的使用场景就是当缓存用。浏览器访问后端应用，后端应用先访问redis，如果redis中有数据，直接返回；否则就去查询数据库。 如你所知，redis作为内存数据库，数据存放在内存中，如果宕机，会导致数据全部丢失。数据丢失，来自浏览器的所有请求...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"redis","slug":"redis","count":3,"path":"api/categories/redis.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"带你看懂rabbitmq集群","uid":"6c37772ad206371cddc6299a58095fb8","slug":"带你看懂rabbitmq集群","date":"2022-12-11T05:52:18.000Z","updated":"2022-12-11T05:52:49.825Z","comments":true,"path":"api/articles/带你看懂rabbitmq集群.json","cover":[],"text":"1. 如何实现rabbitmq高可用服务高可用实现准则服务尽可能少中断、数据尽可能少丢，因此为了达到这一目标，可以通过集群部署来实现 2. rabbitmq集群搭建完成，队列数据是否就高可用了？2.1 官方描述 By default, contents of a queue wi...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"rabbit","slug":"rabbit","count":1,"path":"api/tags/rabbit.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"带你看懂kafka","uid":"4d529d29bdaac9a514904201dfd2325c","slug":"带你看懂kafka","date":"2022-12-11T05:51:06.000Z","updated":"2022-12-11T05:50:57.228Z","comments":true,"path":"api/articles/带你看懂kafka.json","cover":[],"text":"1.前言kafka服务端存在相当多的术语，只有了解这些术语具体的含义，我们才能对kafka有一个粗略的认识。本文将带着你去了解以及理清相关术语，让你不再对其感到陌生以及恐惧。 2.集群搭建工欲善其事必先利其器，在正式开始前，我们需要搭建一个kafka集群 集群搭建选择使用dock...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"kafka存储","uid":"9f635fa5cf662529fd1247abdd3830ea","slug":"kafka存储","date":"2022-12-11T05:50:10.000Z","updated":"2022-12-11T05:50:11.338Z","comments":true,"path":"api/articles/kafka存储.json","cover":[],"text":"1.前言系统仅仅拥有高并发、高可用往往是不够的，在此基础上还需要具备高可靠性。那么什么是高可靠性呢？高可靠性就是系统在宕机恢复后数据不丢失，仍然可以保证业务的正常运行。 作为业务系统的开发人员，提到数据持久化，基于本能反应首选想到的一定是数据库。kafka作为消息中间件，会选择什...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"带你看懂redis IO模型","uid":"5ce0c663a19d8e8ee699635ec101be20","slug":"IO模型","date":"2022-12-11T05:49:28.000Z","updated":"2022-12-11T05:53:54.916Z","comments":true,"path":"api/articles/IO模型.json","cover":[],"text":"1.前言如你所知，高性能web服务器Nginx选择使用IO多路复用技术处理客户端请求，高性能内存数据库Redis同样也选择使用IO多路复用技术处理客户端请求，这足以说明IO多路复用是非常优秀的IO模型，毕竟人以类聚、物以群分。 接下来会从传统阻塞IO模型说起，聊到传统非阻塞IO模...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"redis","slug":"redis","count":3,"path":"api/categories/redis.json"}],"tags":[{"name":"多路复用","slug":"多路复用","count":1,"path":"api/tags/多路复用.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"消息积压你作何处理？","uid":"f8c1d4f8bf32cb91acc7b2a551ae4194","slug":"kafka消费异常会如何处理？","date":"2022-12-11T05:48:32.000Z","updated":"2022-12-11T05:51:46.951Z","comments":true,"path":"api/articles/kafka消费异常会如何处理？.json","cover":null,"text":"1.前言当我们使用@KafkaListener注解声明一个消费者时，该消费者就会轮询去拉取对应分区消息记录，消费消息记录，正如你所知道的那样，正常场景下会执行ack操作，提交offset到kafka服务器。但是异常场景下会如何执行，不知你是否也了解？在了解之前，先一起来看下异常处...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"消息积压你作何处理？","uid":"f8c1d4f8bf32cb91acc7b2a551ae4194","slug":"消息积压你作何处理？","date":"2022-12-11T05:48:32.000Z","updated":"2022-12-11T05:48:29.440Z","comments":true,"path":"api/articles/消息积压你作何处理？.json","cover":null,"text":"1.前言当被通知消费的队列存在消息积压并呈一个持续上升趋势，需要紧急处理一下，你会怎么办？能怎么办呢？先内心慌张一会，战斗一番，然后打开著名的搜索引擎进行搜索，在搜索结果中寻找答案。本文也即将成为你搜索引擎中出现的一个搜索结果，为你提供解决方案。 2.解决方案以下解决方案都是针对...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"消息积压","slug":"消息积压","count":1,"path":"api/tags/消息积压.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}},{"title":"探秘kafka消费者流程","uid":"9553bf6744373965b077add4719345f2","slug":"探秘kafka消费者流程","date":"2022-12-11T05:47:00.000Z","updated":"2022-12-11T05:47:25.192Z","comments":true,"path":"api/articles/探秘kafka消费者流程.json","cover":[],"text":"1.前言为什么会想着去探秘kafka消费者流程呢？在回答这个问题之前，先带你看两个示例，看过之后想必你也就知道其中的原因了 2.示例2.1 示例一@KafkaListener(topics = \"product\", groupId = \"product1\") public voi...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"消息中间件","slug":"消息中间件","count":6,"path":"api/categories/消息中间件.json"}],"tags":[{"name":"kafka","slug":"kafka","count":4,"path":"api/tags/kafka.json"}],"author":{"name":"黑白搬砖工","slug":"blog-author","avatar":"https://wolf-heart.oss-cn-beijing.aliyuncs.com/lg_22641_1606122876_5fbb7d7c432a1.jpeg","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/a601942905git","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/483440845930343","customs":{}}}}]}